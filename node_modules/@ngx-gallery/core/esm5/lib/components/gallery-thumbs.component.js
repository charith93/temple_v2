/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, HostBinding, NgZone, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { animationFrameScheduler, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { ThumbnailsPosition, ThumbnailsMode } from '../models/constants';
var GalleryThumbsComponent = /** @class */ (function () {
    function GalleryThumbsComponent(_el, _zone) {
        var _this = this;
        this._el = _el;
        this._zone = _zone;
        /**
         * Sliding worker
         */
        this._slidingWorker$ = new BehaviorSubject({ value: 0, active: false });
        /**
         * Current slider position in free sliding mode
         */
        this._freeModeCurrentOffset = 0;
        /**
         * Stream that emits when the active item should change
         */
        this.action = new EventEmitter();
        /**
         * Stream that emits when thumb is clicked
         */
        this.thumbClick = new EventEmitter();
        /**
         * Stream that emits when an error occurs
         */
        this.error = new EventEmitter();
        // Activate sliding worker
        this.sliderState$ = this._slidingWorker$.pipe(map(function (state) { return ({
            style: _this.getSliderStyles(state),
            active: state.active
        }); }));
    }
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // Refresh the slider
        this.updateSlider({ value: 0, active: false });
        this._freeModeCurrentOffset = 0;
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.config.gestures && !this.config.disableThumb && typeof Hammer !== 'undefined') {
            /** @type {?} */
            var direction = void 0;
            switch (this.config.thumbPosition) {
                case ThumbnailsPosition.Right:
                case ThumbnailsPosition.Left:
                    direction = Hammer.DIRECTION_VERTICAL;
                    break;
                case ThumbnailsPosition.Top:
                case ThumbnailsPosition.Bottom:
                    direction = Hammer.DIRECTION_HORIZONTAL;
                    break;
            }
            // Activate gestures
            this._hammer = new Hammer(this._el.nativeElement);
            this._hammer.get('pan').set({ direction: direction });
            this._zone.runOutsideAngular(function () {
                // Move the slider
                switch (_this.config.thumbMode) {
                    case ThumbnailsMode.Strict:
                        _this._hammer.on('pan', function (e) { return _this.strictMode(e); });
                        break;
                    case ThumbnailsMode.Free:
                        _this._hammer.on('pan', function (e) { return _this.freeMode(e); });
                }
            });
        }
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._hammer) {
            this._hammer.destroy();
        }
    };
    /**
     * Sliding strict mode
     */
    /**
     * Sliding strict mode
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.strictMode = /**
     * Sliding strict mode
     * @param {?} e
     * @return {?}
     */
    function (e) {
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Right:
            case ThumbnailsPosition.Left:
                this.updateSlider({ value: e.deltaY, active: true });
                if (e.isFinal) {
                    this.updateSlider({ value: 0, active: false });
                    this.verticalPan(e);
                }
                break;
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.updateSlider({ value: e.deltaX, active: true });
                if (e.isFinal) {
                    this.updateSlider({ value: 0, active: false });
                    this.horizontalPan(e);
                }
        }
    };
    /**
     * Sliding free mode
     */
    /**
     * Sliding free mode
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.freeMode = /**
     * Sliding free mode
     * @param {?} e
     * @return {?}
     */
    function (e) {
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Right:
            case ThumbnailsPosition.Left:
                this.updateSlider({ value: this._freeModeCurrentOffset + e.deltaY, active: true });
                if (e.isFinal) {
                    if (this.minFreeScrollExceeded(e.deltaY, this.config.thumbWidth, this.config.thumbHeight)) {
                        this._freeModeCurrentOffset = -(this.state.items.length - 1 - this.state.currIndex) * this.config.thumbHeight;
                    }
                    else if (this.maxFreeScrollExceeded(e.deltaY, this.config.thumbHeight, this.config.thumbWidth)) {
                        this._freeModeCurrentOffset = this.state.currIndex * this.config.thumbHeight;
                    }
                    else {
                        this._freeModeCurrentOffset += e.deltaY;
                    }
                    this.updateSlider({ value: this._freeModeCurrentOffset, active: false });
                }
                break;
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.updateSlider({ value: this._freeModeCurrentOffset + e.deltaX, active: true });
                if (e.isFinal) {
                    if (this.minFreeScrollExceeded(e.deltaX, this.config.thumbHeight, this.config.thumbWidth)) {
                        this._freeModeCurrentOffset = -(this.state.items.length - 1 - this.state.currIndex) * this.config.thumbWidth;
                    }
                    else if (this.maxFreeScrollExceeded(e.deltaX, this.config.thumbWidth, this.config.thumbHeight)) {
                        this._freeModeCurrentOffset = this.state.currIndex * this.config.thumbWidth;
                    }
                    else {
                        this._freeModeCurrentOffset += e.deltaX;
                    }
                    this.updateSlider({ value: this._freeModeCurrentOffset, active: false });
                }
        }
    };
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     */
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    GalleryThumbsComponent.prototype.minFreeScrollExceeded = /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (delta, width, height) {
        return -(this._freeModeCurrentOffset + delta - width / 2) > (this.state.items.length - this.state.currIndex) * height;
    };
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     */
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    GalleryThumbsComponent.prototype.maxFreeScrollExceeded = /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     * @param {?} delta
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (delta, width, height) {
        return this._freeModeCurrentOffset + delta > (this.state.currIndex * width) + (height / 2);
    };
    /**
     * Convert sliding state to styles
     */
    /**
     * Convert sliding state to styles
     * @param {?} state
     * @return {?}
     */
    GalleryThumbsComponent.prototype.getSliderStyles = /**
     * Convert sliding state to styles
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var value;
        switch (this.config.thumbPosition) {
            case ThumbnailsPosition.Top:
            case ThumbnailsPosition.Bottom:
                this.width = '100%';
                this.height = this.config.thumbHeight + 'px';
                value = -(this.state.currIndex * this.config.thumbWidth) - (this.config.thumbWidth / 2 - state.value);
                return {
                    transform: "translate3d(" + value + "px, 0, 0)",
                    width: this.state.items.length * this.config.thumbWidth + 'px',
                    height: '100%'
                };
            case ThumbnailsPosition.Left:
            case ThumbnailsPosition.Right:
                this.width = this.config.thumbWidth + 'px';
                this.height = '100%';
                value = -(this.state.currIndex * this.config.thumbHeight) - (this.config.thumbHeight / 2 - state.value);
                return {
                    transform: "translate3d(0, " + value + "px, 0)",
                    width: '100%',
                    height: this.state.items.length * this.config.thumbHeight + 'px'
                };
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.verticalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!(e.direction & Hammer.DIRECTION_UP && e.offsetDirection & Hammer.DIRECTION_VERTICAL)) {
            return;
        }
        if (e.velocityY > 0.3) {
            this.prev();
        }
        else if (e.velocityY < -0.3) {
            this.next();
        }
        else {
            if (e.deltaY / 2 <= -this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaY / 2 >= this.config.thumbHeight * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    GalleryThumbsComponent.prototype.horizontalPan = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!(e.direction & Hammer.DIRECTION_HORIZONTAL && e.offsetDirection & Hammer.DIRECTION_HORIZONTAL)) {
            return;
        }
        if (e.velocityX > 0.3) {
            this.prev();
        }
        else if (e.velocityX < -0.3) {
            this.next();
        }
        else {
            if (e.deltaX / 2 <= -this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.next();
            }
            else if (e.deltaX / 2 >= this.config.thumbWidth * this.state.items.length / this.config.panSensitivity) {
                this.prev();
            }
            else {
                this.action.emit(this.state.currIndex);
            }
        }
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.next = /**
     * @return {?}
     */
    function () {
        this.action.emit('next');
    };
    /**
     * @return {?}
     */
    GalleryThumbsComponent.prototype.prev = /**
     * @return {?}
     */
    function () {
        this.action.emit('prev');
    };
    /**
     * @param {?} state
     * @return {?}
     */
    GalleryThumbsComponent.prototype.updateSlider = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        var _this = this;
        /** @type {?} */
        var newState = tslib_1.__assign({}, this._slidingWorker$.value, state);
        animationFrameScheduler.schedule(function () { return _this._slidingWorker$.next(newState); });
    };
    GalleryThumbsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'gallery-thumbs',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <div *ngIf=\"sliderState$ | async; let sliderState\"\n         class=\"g-thumbs-container\">\n      <div class=\"g-slider\"\n           [class.g-no-transition]=\"sliderState.active\"\n           [ngStyle]=\"sliderState.style\">\n\n        <gallery-thumb *ngFor=\"let item of state.items;let i = index\"\n                       [type]=\"item.type\"\n                       [config]=\"config\"\n                       [data]=\"item.data\"\n                       [currIndex]=\"state.currIndex\"\n                       [index]=\"i\"\n                       [tapClickDisabled]=\"config.disableThumb\"\n                       (tapClick)=\"thumbClick.emit(i)\"\n                       (error)=\"error.emit({itemIndex: i, error: $event})\"></gallery-thumb>\n      </div>\n    </div>\n  "
                }] }
    ];
    /** @nocollapse */
    GalleryThumbsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone }
    ]; };
    GalleryThumbsComponent.propDecorators = {
        state: [{ type: Input }],
        config: [{ type: Input }],
        action: [{ type: Output }],
        thumbClick: [{ type: Output }],
        error: [{ type: Output }],
        height: [{ type: HostBinding, args: ['style.height',] }],
        width: [{ type: HostBinding, args: ['style.width',] }]
    };
    return GalleryThumbsComponent;
}());
export { GalleryThumbsComponent };
if (false) {
    /**
     * Sliding worker
     * @type {?}
     */
    GalleryThumbsComponent.prototype._slidingWorker$;
    /**
     * HammerJS instance
     * @type {?}
     */
    GalleryThumbsComponent.prototype._hammer;
    /**
     * Current slider position in free sliding mode
     * @type {?}
     */
    GalleryThumbsComponent.prototype._freeModeCurrentOffset;
    /**
     * Stream that emits sliding state
     * @type {?}
     */
    GalleryThumbsComponent.prototype.sliderState$;
    /**
     * Gallery state
     * @type {?}
     */
    GalleryThumbsComponent.prototype.state;
    /**
     * Gallery config
     * @type {?}
     */
    GalleryThumbsComponent.prototype.config;
    /**
     * Stream that emits when the active item should change
     * @type {?}
     */
    GalleryThumbsComponent.prototype.action;
    /**
     * Stream that emits when thumb is clicked
     * @type {?}
     */
    GalleryThumbsComponent.prototype.thumbClick;
    /**
     * Stream that emits when an error occurs
     * @type {?}
     */
    GalleryThumbsComponent.prototype.error;
    /**
     * Host height
     * @type {?}
     */
    GalleryThumbsComponent.prototype.height;
    /**
     * Host width
     * @type {?}
     */
    GalleryThumbsComponent.prototype.width;
    /** @type {?} */
    GalleryThumbsComponent.prototype._el;
    /** @type {?} */
    GalleryThumbsComponent.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,