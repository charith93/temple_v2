/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HttpClient, HttpEventType, HttpRequest, HttpHeaders } from '@angular/common/http';
import { Subject, Subscription, zip, fromEvent, EMPTY } from 'rxjs';
import { tap, switchMap, catchError } from 'rxjs/operators';
var LazyImage = /** @class */ (function () {
    function LazyImage(http) {
        var _this = this;
        this.http = http;
        this._imageLoader$ = new Subject();
        this._loaderSub$ = Subscription.EMPTY;
        this.progress = new EventEmitter();
        this.loaded = new EventEmitter();
        this.error = new EventEmitter();
        this._loaderSub$ = this._imageLoader$.pipe(switchMap(function (imageSrc) { return _this.mode === 'determinate' ? _this.progressiveLoader(imageSrc) : _this.nativeLoader(imageSrc); })).subscribe();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LazyImage.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['src'] && changes['src'].previousValue !== changes['src'].currentValue) {
            this.loadImage(this.src);
        }
    };
    /**
     * @return {?}
     */
    LazyImage.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._loaderSub$.unsubscribe();
        this._imageLoader$.complete();
    };
    /**
     * @param {?} imagePath
     * @return {?}
     */
    LazyImage.prototype.loadImage = /**
     * @param {?} imagePath
     * @return {?}
     */
    function (imagePath) {
        this._imageLoader$.next(imagePath);
    };
    /**
     * Load image using HttpClient, This requires XHR access to the URL
     * @param url
     */
    /**
     * Load image using HttpClient, This requires XHR access to the URL
     * @param {?} url
     * @return {?}
     */
    LazyImage.prototype.progressiveLoader = /**
     * Load image using HttpClient, This requires XHR access to the URL
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        /** @type {?} */
        var downloadImage = new HttpRequest('GET', url, {
            reportProgress: true,
            responseType: 'blob',
            headers: new HttpHeaders({ 'CACHE_GALLERY_IMAGE': 'true' })
        });
        return this.http.request(downloadImage).pipe(tap(function (event) {
            if (event.type === HttpEventType.DownloadProgress) {
                _this.progress.emit({ loaded: event.loaded, total: event.total });
            }
            if (event.type === HttpEventType.Response) {
                _this.loaded.emit(URL.createObjectURL(event.body));
            }
        }), catchError(function (err) {
            _this.error.emit(err);
            return EMPTY;
        }));
    };
    /**
     * Native image loader, does not emit progress
     * @param url
     */
    /**
     * Native image loader, does not emit progress
     * @param {?} url
     * @return {?}
     */
    LazyImage.prototype.nativeLoader = /**
     * Native image loader, does not emit progress
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        /** @type {?} */
        var img = new Image();
        // Stop previously loading
        img.src = url;
        // Image load success
        /** @type {?} */
        var loadSuccess = fromEvent(img, 'load').pipe(tap(function () { return _this.loaded.emit(url); }));
        // Image load failed
        /** @type {?} */
        var loadError = fromEvent(img, 'error').pipe(tap(function () { return _this.error.emit(new Error("[lazyImage]: The image " + url + " did not load")); }));
        return zip(loadSuccess, loadError);
    };
    LazyImage.decorators = [
        { type: Directive, args: [{
                    selector: '[lazyImage]'
                },] }
    ];
    /** @nocollapse */
    LazyImage.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    LazyImage.propDecorators = {
        src: [{ type: Input, args: ['lazyImage',] }],
        mode: [{ type: Input }],
        progress: [{ type: Output }],
        loaded: [{ type: Output }],
        error: [{ type: Output }]
    };
    return LazyImage;
}());
export { LazyImage };
if (false) {
    /** @type {?} */
    LazyImage.prototype._imageLoader$;
    /** @type {?} */
    LazyImage.prototype._loaderSub$;
    /** @type {?} */
    LazyImage.prototype.src;
    /** @type {?} */
    LazyImage.prototype.mode;
    /** @type {?} */
    LazyImage.prototype.progress;
    /** @type {?} */
    LazyImage.prototype.loaded;
    /** @type {?} */
    LazyImage.prototype.error;
    /** @type {?} */
    LazyImage.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,