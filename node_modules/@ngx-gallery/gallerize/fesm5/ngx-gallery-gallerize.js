import { Directive, Input, Inject, Optional, Self, Host, NgZone, ElementRef, Renderer2, PLATFORM_ID, NgModule } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Gallery, ImageItem, GalleryComponent, GalleryModule } from '@ngx-gallery/core';
import { Lightbox, LightboxModule } from '@ngx-gallery/lightbox';
import { Subject, from, EMPTY } from 'rxjs';
import { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var GallerizeDirective = /** @class */ (function () {
    function GallerizeDirective(_zone, _el, _gallery, _lightbox, _renderer, platform, _document, _galleryCmp) {
        this._zone = _zone;
        this._el = _el;
        this._gallery = _gallery;
        this._lightbox = _lightbox;
        this._renderer = _renderer;
        this._document = _document;
        this._galleryCmp = _galleryCmp;
        /**
         * Default gallery id
         */
        this._galleryId = 'lightbox';
        /**
         * The selector used to query images elements
         */
        this.selector = 'img';
        // Set gallerize mode
        if (isPlatformBrowser(platform)) {
            this._mode = _galleryCmp ? "gallery" /* Gallery */ : "detector" /* Detector */;
        }
    }
    /**
     * @return {?}
     */
    GallerizeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._zone.runOutsideAngular(function () {
            _this._galleryId = _this.gallerize || _this._galleryId;
            /** @type {?} */
            var ref = _this._gallery.ref(_this._galleryId);
            switch (_this._mode) {
                case "detector" /* Detector */:
                    _this.detectorMode(ref);
                    break;
                case "gallery" /* Gallery */:
                    _this.galleryMode(ref);
            }
        });
    };
    /**
     * @return {?}
     */
    GallerizeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        switch (this._mode) {
            case "detector" /* Detector */:
                this._detector$.complete();
                this._observer$.disconnect();
                break;
            case "gallery" /* Gallery */:
                this._itemClick$.unsubscribe();
                this._itemChange$.unsubscribe();
        }
    };
    /** Gallery mode: means `gallerize` directive is used on `<gallery>` component
     * Adds a click event to each gallery item so it opens in lightbox */
    /**
     * Gallery mode: means `gallerize` directive is used on `<gallery>` component
     * Adds a click event to each gallery item so it opens in lightbox
     * @param {?} galleryRef
     * @return {?}
     */
    GallerizeDirective.prototype.galleryMode = /**
     * Gallery mode: means `gallerize` directive is used on `<gallery>` component
     * Adds a click event to each gallery item so it opens in lightbox
     * @param {?} galleryRef
     * @return {?}
     */
    function (galleryRef) {
        var _this = this;
        // Clone its items to the new gallery instance
        this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe(function (i) { return _this._lightbox.open(i, _this._galleryId); });
        this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe(function (state) { return galleryRef.load(state.items); });
    };
    /** Detector mode: means `gallerize` directive is used on a normal HTMLElement
     *  Detects images and adds a click event to each image so it opens in the lightbox */
    /**
     * Detector mode: means `gallerize` directive is used on a normal HTMLElement
     *  Detects images and adds a click event to each image so it opens in the lightbox
     * @param {?} galleryRef
     * @return {?}
     */
    GallerizeDirective.prototype.detectorMode = /**
     * Detector mode: means `gallerize` directive is used on a normal HTMLElement
     *  Detects images and adds a click event to each image so it opens in the lightbox
     * @param {?} galleryRef
     * @return {?}
     */
    function (galleryRef) {
        var _this = this;
        this._detector$ = new Subject();
        // Query image elements
        this._detector$.pipe(debounceTime(300), switchMap(function () {
            /**
             * get all img elements from content
             * @type {?}
             */
            var imageElements = _this._el.nativeElement.querySelectorAll(_this.selector);
            if (imageElements && imageElements.length) {
                /** @type {?} */
                var images_1 = [];
                return from(imageElements).pipe(map(function (el, i) {
                    // Add click event to the image
                    _this._renderer.setStyle(el, 'cursor', 'pointer');
                    _this._renderer.setProperty(el, 'onclick', function () {
                        return _this._zone.run(function () { return _this._lightbox.open(i, _this._galleryId); });
                    });
                    if (el instanceof HTMLImageElement) {
                        // If element is type of img use the src property
                        return {
                            src: el.getAttribute('imageSrc') || el.src,
                            thumb: el.getAttribute('thumbSrc') || el.src
                        };
                    }
                    else {
                        // Otherwise, use element background-image url
                        /** @type {?} */
                        var elStyle = el.currentStyle || _this._document.defaultView.getComputedStyle(el, null);
                        /** @type {?} */
                        var background = elStyle.backgroundImage.slice(4, -1).replace(/"/g, '');
                        return {
                            src: el.getAttribute('imageSrc') || background,
                            thumb: el.getAttribute('thumbSrc') || background
                        };
                    }
                }), tap(function (data) { return images_1.push(new ImageItem(data)); }), finalize(function () { return galleryRef.load(images_1); }));
            }
            else {
                return EMPTY;
            }
        })).subscribe();
        // Observe content changes
        this._observer$ = new MutationObserver(function () { return _this._detector$.next(); });
        this._observer$.observe(this._el.nativeElement, { childList: true, subtree: true });
    };
    GallerizeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[gallerize]'
                },] }
    ];
    /** @nocollapse */
    GallerizeDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: Gallery },
        { type: Lightbox },
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: GalleryComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }
    ]; };
    GallerizeDirective.propDecorators = {
        gallerize: [{ type: Input }],
        selector: [{ type: Input }]
    };
    return GallerizeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var GallerizeModule = /** @class */ (function () {
    function GallerizeModule() {
    }
    GallerizeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        GalleryModule,
                        LightboxModule
                    ],
                    declarations: [GallerizeDirective],
                    exports: [GallerizeDirective]
                },] }
    ];
    return GallerizeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { GallerizeDirective, GallerizeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktZ2FsbGVyaXplLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9Abmd4LWdhbGxlcnkvZ2FsbGVyaXplL2xpYi9nYWxsZXJpemUuZGlyZWN0aXZlLnRzIiwibmc6Ly9Abmd4LWdhbGxlcnkvZ2FsbGVyaXplL2xpYi9nYWxsZXJpemUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIElucHV0LFxyXG4gIE9uSW5pdCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgSW5qZWN0LFxyXG4gIE9wdGlvbmFsLFxyXG4gIFNlbGYsXHJcbiAgSG9zdCxcclxuICBOZ1pvbmUsXHJcbiAgRWxlbWVudFJlZixcclxuICBSZW5kZXJlcjIsXHJcbiAgUExBVEZPUk1fSURcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQsIGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7IEdhbGxlcnksIEdhbGxlcnlSZWYsIEltYWdlSXRlbSwgR2FsbGVyeUNvbXBvbmVudCwgR2FsbGVyeVN0YXRlLCBHYWxsZXJ5SXRlbSB9IGZyb20gJ0BuZ3gtZ2FsbGVyeS9jb3JlJztcclxuaW1wb3J0IHsgTGlnaHRib3ggfSBmcm9tICdAbmd4LWdhbGxlcnkvbGlnaHRib3gnO1xyXG5cclxuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCBmcm9tLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIG1hcCwgc3dpdGNoTWFwLCBmaW5hbGl6ZSwgZGVib3VuY2VUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZGlyZWN0aXZlIGhhcyAyIG1vZGVzOlxyXG4gKiAxIC0gSWYgaG9zdCBlbGVtZW50IGlzIGEgSFRNTEVsZW1lbnQsIGl0IGRldGVjdHMgdGhlIGltYWdlcyBhbmQgaG9va3MgdGhlaXIgY2xpY2tzIHRvIGxpZ2h0Ym94XHJcbiAqIDIgLSBJZiBob3N0IGVsZW1lbnQgaXMgYSBHYWxsZXJ5Q29tcG9uZW50LCBpdCBob29rcyB0aGUgaW1hZ2VzIGNsaWNrIHRvIHRoZSBsaWdodGJveFxyXG4gKi9cclxuXHJcbmNvbnN0IGVudW0gR2FsbGVyaXplTW9kZSB7XHJcbiAgRGV0ZWN0b3IgPSAnZGV0ZWN0b3InLFxyXG4gIEdhbGxlcnkgPSAnZ2FsbGVyeSdcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZ2FsbGVyaXplXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEdhbGxlcml6ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgLyoqIERlZmF1bHQgZ2FsbGVyeSBpZCAqL1xyXG4gIHByaXZhdGUgX2dhbGxlcnlJZCA9ICdsaWdodGJveCc7XHJcblxyXG4gIC8qKiBHYWxsZXJpemUgbW9kZSAqL1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgX21vZGU6IEdhbGxlcml6ZU1vZGU7XHJcblxyXG4gIC8qKiBJZiBob3N0IGVsZW1lbnQgaXMgYSBIVE1MRWxlbWVudCwgd2lsbCB1c2UgdGhlIGZvbGxvd2luZyB2YXJpYWJsZXM6ICovXHJcblxyXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB0byBmaXJlIHRoZSBkZXRlY3Rpb24gc3RyZWFtIHRoZSBpbWFnZSBlbGVtZW50cyBoYXMgY2hhbmdlZCAqL1xyXG4gIHByaXZhdGUgX29ic2VydmVyJDogYW55O1xyXG5cclxuICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBpbWFnZSBpcyBkaXNjb3ZlciAqL1xyXG4gIHByaXZhdGUgX2RldGVjdG9yJDogU3ViamVjdDxhbnk+O1xyXG5cclxuICAvKiogSWYgaG9zdCBlbGVtZW50IGlzIGEgR2FsbGVyeUNvbXBvbmVudCwgd2lsbCB1c2UgdGhlIGZvbGxvd2luZyB2YXJpYWJsZXM6ICovXHJcblxyXG4gIC8qKiBHYWxsZXJ5IGV2ZW50cyAoaWYgdXNlZCBvbiBhIGdhbGxlcnkgY29tcG9uZW50KSAqL1xyXG4gIHByaXZhdGUgX2l0ZW1DbGljayQ6IFN1YnNjcmlwdGlvbjtcclxuICBwcml2YXRlIF9pdGVtQ2hhbmdlJDogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgLyoqIElmIHNldCwgaXQgd2lsbCBiZWNvbWUgdGhlIGdhbGxlcnkgaWQgKi9cclxuICBASW5wdXQoKSBnYWxsZXJpemU6IHN0cmluZztcclxuXHJcbiAgLyoqIFRoZSBzZWxlY3RvciB1c2VkIHRvIHF1ZXJ5IGltYWdlcyBlbGVtZW50cyAqL1xyXG4gIEBJbnB1dCgpIHNlbGVjdG9yID0gJ2ltZyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3pvbmU6IE5nWm9uZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIF9lbDogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBwcml2YXRlIF9nYWxsZXJ5OiBHYWxsZXJ5LFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgX2xpZ2h0Ym94OiBMaWdodGJveCxcclxuICAgICAgICAgICAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtOiBPYmplY3QsXHJcbiAgICAgICAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jdW1lbnQ6IGFueSxcclxuICAgICAgICAgICAgICBASG9zdCgpIEBTZWxmKCkgQE9wdGlvbmFsKCkgcHJpdmF0ZSBfZ2FsbGVyeUNtcDogR2FsbGVyeUNvbXBvbmVudCkge1xyXG5cclxuICAgIC8vIFNldCBnYWxsZXJpemUgbW9kZVxyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtKSkge1xyXG4gICAgICB0aGlzLl9tb2RlID0gX2dhbGxlcnlDbXAgPyBHYWxsZXJpemVNb2RlLkdhbGxlcnkgOiBHYWxsZXJpemVNb2RlLkRldGVjdG9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgdGhpcy5fZ2FsbGVyeUlkID0gdGhpcy5nYWxsZXJpemUgfHwgdGhpcy5fZ2FsbGVyeUlkO1xyXG4gICAgICBjb25zdCByZWYgPSB0aGlzLl9nYWxsZXJ5LnJlZih0aGlzLl9nYWxsZXJ5SWQpO1xyXG5cclxuICAgICAgc3dpdGNoICh0aGlzLl9tb2RlKSB7XHJcbiAgICAgICAgY2FzZSBHYWxsZXJpemVNb2RlLkRldGVjdG9yOlxyXG4gICAgICAgICAgdGhpcy5kZXRlY3Rvck1vZGUocmVmKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgR2FsbGVyaXplTW9kZS5HYWxsZXJ5OlxyXG4gICAgICAgICAgdGhpcy5nYWxsZXJ5TW9kZShyZWYpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgc3dpdGNoICh0aGlzLl9tb2RlKSB7XHJcbiAgICAgIGNhc2UgR2FsbGVyaXplTW9kZS5EZXRlY3RvcjpcclxuICAgICAgICB0aGlzLl9kZXRlY3RvciQuY29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLl9vYnNlcnZlciQuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEdhbGxlcml6ZU1vZGUuR2FsbGVyeTpcclxuICAgICAgICB0aGlzLl9pdGVtQ2xpY2skLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy5faXRlbUNoYW5nZSQudW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBHYWxsZXJ5IG1vZGU6IG1lYW5zIGBnYWxsZXJpemVgIGRpcmVjdGl2ZSBpcyB1c2VkIG9uIGA8Z2FsbGVyeT5gIGNvbXBvbmVudFxyXG4gICAqIEFkZHMgYSBjbGljayBldmVudCB0byBlYWNoIGdhbGxlcnkgaXRlbSBzbyBpdCBvcGVucyBpbiBsaWdodGJveCAqL1xyXG4gIHByaXZhdGUgZ2FsbGVyeU1vZGUoZ2FsbGVyeVJlZjogR2FsbGVyeVJlZikge1xyXG4gICAgLy8gQ2xvbmUgaXRzIGl0ZW1zIHRvIHRoZSBuZXcgZ2FsbGVyeSBpbnN0YW5jZVxyXG4gICAgdGhpcy5faXRlbUNsaWNrJCA9IHRoaXMuX2dhbGxlcnlDbXAuZ2FsbGVyeVJlZi5pdGVtQ2xpY2suc3Vic2NyaWJlKChpOiBudW1iZXIpID0+IHRoaXMuX2xpZ2h0Ym94Lm9wZW4oaSwgdGhpcy5fZ2FsbGVyeUlkKSk7XHJcbiAgICB0aGlzLl9pdGVtQ2hhbmdlJCA9IHRoaXMuX2dhbGxlcnlDbXAuZ2FsbGVyeVJlZi5pdGVtc0NoYW5nZWQuc3Vic2NyaWJlKChzdGF0ZTogR2FsbGVyeVN0YXRlKSA9PiBnYWxsZXJ5UmVmLmxvYWQoc3RhdGUuaXRlbXMpKTtcclxuICB9XHJcblxyXG4gIC8qKiBEZXRlY3RvciBtb2RlOiBtZWFucyBgZ2FsbGVyaXplYCBkaXJlY3RpdmUgaXMgdXNlZCBvbiBhIG5vcm1hbCBIVE1MRWxlbWVudFxyXG4gICAqICBEZXRlY3RzIGltYWdlcyBhbmQgYWRkcyBhIGNsaWNrIGV2ZW50IHRvIGVhY2ggaW1hZ2Ugc28gaXQgb3BlbnMgaW4gdGhlIGxpZ2h0Ym94ICovXHJcbiAgcHJpdmF0ZSBkZXRlY3Rvck1vZGUoZ2FsbGVyeVJlZjogR2FsbGVyeVJlZikge1xyXG4gICAgdGhpcy5fZGV0ZWN0b3IkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIC8vIFF1ZXJ5IGltYWdlIGVsZW1lbnRzXHJcbiAgICB0aGlzLl9kZXRlY3RvciQucGlwZShcclxuICAgICAgZGVib3VuY2VUaW1lKDMwMCksXHJcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcblxyXG4gICAgICAgIC8qKiBnZXQgYWxsIGltZyBlbGVtZW50cyBmcm9tIGNvbnRlbnQgKi9cclxuICAgICAgICBjb25zdCBpbWFnZUVsZW1lbnRzID0gdGhpcy5fZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2VsZWN0b3IpO1xyXG5cclxuICAgICAgICBpZiAoaW1hZ2VFbGVtZW50cyAmJiBpbWFnZUVsZW1lbnRzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgIGNvbnN0IGltYWdlczogR2FsbGVyeUl0ZW1bXSA9IFtdO1xyXG5cclxuICAgICAgICAgIHJldHVybiBmcm9tKGltYWdlRWxlbWVudHMpLnBpcGUoXHJcbiAgICAgICAgICAgIG1hcCgoZWw6IGFueSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIEFkZCBjbGljayBldmVudCB0byB0aGUgaW1hZ2VcclxuICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShlbCwgJ2N1cnNvcicsICdwb2ludGVyJyk7XHJcbiAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0UHJvcGVydHkoZWwsICdvbmNsaWNrJywgKCkgPT5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHRoaXMuX2xpZ2h0Ym94Lm9wZW4oaSwgdGhpcy5fZ2FsbGVyeUlkKSlcclxuICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoZWwgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBlbGVtZW50IGlzIHR5cGUgb2YgaW1nIHVzZSB0aGUgc3JjIHByb3BlcnR5XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICBzcmM6IGVsLmdldEF0dHJpYnV0ZSgnaW1hZ2VTcmMnKSB8fCBlbC5zcmMsXHJcbiAgICAgICAgICAgICAgICAgIHRodW1iOiBlbC5nZXRBdHRyaWJ1dGUoJ3RodW1iU3JjJykgfHwgZWwuc3JjXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHVzZSBlbGVtZW50IGJhY2tncm91bmQtaW1hZ2UgdXJsXHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbFN0eWxlID0gZWwuY3VycmVudFN0eWxlIHx8IHRoaXMuX2RvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZCA9IGVsU3R5bGUuYmFja2dyb3VuZEltYWdlLnNsaWNlKDQsIC0xKS5yZXBsYWNlKC9cIi9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICBzcmM6IGVsLmdldEF0dHJpYnV0ZSgnaW1hZ2VTcmMnKSB8fCBiYWNrZ3JvdW5kLFxyXG4gICAgICAgICAgICAgICAgICB0aHVtYjogZWwuZ2V0QXR0cmlidXRlKCd0aHVtYlNyYycpIHx8IGJhY2tncm91bmRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgdGFwKChkYXRhOiBhbnkpID0+IGltYWdlcy5wdXNoKG5ldyBJbWFnZUl0ZW0oZGF0YSkpKSxcclxuICAgICAgICAgICAgZmluYWxpemUoKCkgPT4gZ2FsbGVyeVJlZi5sb2FkKGltYWdlcykpXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgKS5zdWJzY3JpYmUoKTtcclxuXHJcbiAgICAvLyBPYnNlcnZlIGNvbnRlbnQgY2hhbmdlc1xyXG4gICAgdGhpcy5fb2JzZXJ2ZXIkID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKCkgPT4gdGhpcy5fZGV0ZWN0b3IkLm5leHQoKSk7XHJcbiAgICB0aGlzLl9vYnNlcnZlciQub2JzZXJ2ZSh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdhbGxlcnlNb2R1bGUgfSBmcm9tICdAbmd4LWdhbGxlcnkvY29yZSc7XHJcbmltcG9ydCB7IExpZ2h0Ym94TW9kdWxlIH0gZnJvbSAnQG5neC1nYWxsZXJ5L2xpZ2h0Ym94JztcclxuaW1wb3J0IHsgR2FsbGVyaXplRGlyZWN0aXZlIH0gZnJvbSAnLi9nYWxsZXJpemUuZGlyZWN0aXZlJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgR2FsbGVyeU1vZHVsZSxcclxuICAgIExpZ2h0Ym94TW9kdWxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtHYWxsZXJpemVEaXJlY3RpdmVdLFxyXG4gIGV4cG9ydHM6IFtHYWxsZXJpemVEaXJlY3RpdmVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHYWxsZXJpemVNb2R1bGUge1xyXG5cclxufVxyXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtJQWtFRSw0QkFBb0IsS0FBYSxFQUNiLEdBQWUsRUFDZixRQUFpQixFQUNqQixTQUFtQixFQUNuQixTQUFvQixFQUNQLFFBQWdCLEVBQ1gsU0FBYyxFQUNKLFdBQTZCO1FBUHpELFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixjQUFTLEdBQVQsU0FBUyxDQUFVO1FBQ25CLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFFRixjQUFTLEdBQVQsU0FBUyxDQUFLO1FBQ0osZ0JBQVcsR0FBWCxXQUFXLENBQWtCOzs7O1FBbENyRSxlQUFVLEdBQUcsVUFBVSxDQUFDOzs7O1FBeUJ2QixhQUFRLEdBQUcsS0FBSyxDQUFDOztRQVl4QixJQUFJLGlCQUFpQixDQUFDLFFB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